<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Exercice 2 — Gestion de projets et tâches (Hibernate + tests)&#10;&#10;Ce dépôt contient une petite application Java (Hibernate/JPA) qui illustre la gestion de projets, tâches, employés et liaisons &quot;employé ↔ tâche&quot;. Ce README décrit l'exercice, la structure du projet, comment lancer les tests et où placer des captures/diagrammes.&#10;&#10;## Objectifs de l'exercice&#10;&#10;- Mettre en place la couche persistance avec des entités JPA : `Employe`, `Projet`, `Tache`, `EmployeTache`.&#10;- Créer une classe utilitaire `HibernateUtil` pour la configuration Hibernate (MySQL en version main, H2 en mémoire pour les tests).&#10;- Implémenter la couche service avec opérations CRUD et méthodes métier spécifiques :&#10;  - Afficher les tâches réalisées par un employé.&#10;  - Afficher les projets gérés par un employé.&#10;  - Afficher les tâches planifiées pour un projet.&#10;  - Afficher les tâches réalisées pour un projet avec les dates réelles (formatées).&#10;  - Requêtes spécifiques : tâches dont le prix &gt; 1000 DH (NamedQuery) et tâches réalisées entre deux dates.&#10;- Rédiger des tests d'intégration JUnit qui utilisent H2 en mémoire pour valider ces comportements.&#10;&#10;## Structure importante du projet&#10;&#10;- `pom.xml` — dépendances Maven (Hibernate, MySQL, tests, H2 pour tests).&#10;- `src/main/java/ma/projet/classes` — entités JPA : `Employe.java`, `Projet.java`, `Tache.java`, `EmployeTache.java`.&#10;- `src/main/java/ma/projet/util/HibernateUtil.java` — configuration Hibernate (utilisée par l'application principale).&#10;- `src/main/java/ma/projet/dao/IDao.java` — interface générique CRUD.&#10;- `src/main/java/ma/projet/service/` — services : `EmployeService.java`, `ProjetService.java`, `TacheService.java`, `EmployeTacheService.java`.&#10;- `src/main/java/ma/projet/presentation/Presentation.java` — classe d'exécution (runner) fournie dans le projet.&#10;- `src/test/java/ma/projet/TestServices.java` — tests d'intégration JUnit 4 utilisant H2 en mémoire.&#10;- `src/test/java/ma/projet/util/HibernateUtil.java` — version de `HibernateUtil` pour tests (H2).&#10;&#10;## Commentaires importants&#10;&#10;- Les tests utilisent H2 en mémoire (configuration dans `src/test/java/ma/projet/util/HibernateUtil.java`) pour éviter la dépendance à une base MySQL locale.&#10;- La configuration Hibernate principale (dans `src/main/java/.../HibernateUtil.java`) est actuellement codée en dur pour MySQL. Vous pouvez l'harmoniser avec `src/main/resources/application.properties` si vous le souhaitez.&#10;&#10;## Commandes utiles (cmd.exe / Windows)&#10;&#10;- Compiler et empaqueter (sans tests) :&#10;&#10;```bat&#10;mvn -DskipTests package&#10;```&#10;&#10;- Lancer uniquement les tests d'intégration créés (`TestServices`) :&#10;&#10;```bat&#10;mvn -Dtest=TestServices test&#10;```&#10;&#10;- Lancer tous les tests :&#10;&#10;```bat&#10;mvn test&#10;```&#10;&#10;- Exécuter la classe principale `Presentation` (si vous avez configuré `exec-maven-plugin` ou depuis un IDE) :&#10;&#10;```bat&#10;mvn exec:java -Dexec.mainClass=&quot;ma.projet.presentation.Presentation&quot;&#10;```&#10;&#10;(Remarque : `exec:java` nécessite que le plugin `exec-maven-plugin` soit présent dans `pom.xml` ou que vous lanciez la classe depuis votre IDE.)&#10;&#10;## Ajout d'images / captures d'écran&#10;&#10;Placez les images (diagrammes, captures d'écran, sorties attendues) dans un sous-dossier `docs/images/` puis référencez-les ici. Exemples :&#10;&#10;- Diagramme d'architecture :&#10;&#10;![Diagramme d'architecture](docs/images/architecture.png)&#10;&#10;- Exemple de sortie console attendu :&#10;&#10;![Sortie console](docs/images/sortie_console.png)&#10;&#10;(Remplacez les chemins et ajoutez les fichiers image correspondants.)&#10;&#10;## Exemple d'affichage attendu (format)&#10;&#10;```&#10;Projet : 4      Nom : Gestion de stock     Date début : 14 Janvier 2013&#10;Liste des tâches:&#10;Num  Nom             Date Début Réelle   Date Fin Réelle&#10;12   Analyse         10/02/2013          20/02/2013&#10;13   Conception      10/03/2013          15/03/2013&#10;14   Développement   10/04/2013          25/04/2013&#10;```&#10;&#10;## Résolution des erreurs courantes&#10;&#10;- `ClassNotFoundException: org.h2.Driver` lors des tests : la dépendance H2 a été ajoutée au `pom.xml` avec scope `test`.&#10;- `LazyInitializationException` : les services utilisent désormais des requêtes HQL dans une session ouverte pour charger les collections (évite les accès hors session).&#10;&#10;## Coverage des exigences&#10;&#10;- Couche Persistance : entités présentes ✓&#10;- `application.properties` : présent (attention aux valeurs actuellement utilisées) ✓&#10;- `HibernateUtil` : présent (version main pour MySQL, version test pour H2) ✓&#10;- Interface `IDao` : ajoutée ✓&#10;- Services CRUD et méthodes métier demandées : implémentées ✓&#10;- Tests JUnit (H2 en mémoire) : ajoutés ✓&#10;&#10;## Prochaines améliorations (optionnelles)&#10;&#10;- Remplacer `System.out.println` / `printStackTrace` par un logger (SLF4J + Logback).&#10;- Centraliser la configuration Hibernate dans `application.properties` et faire lire `HibernateUtil` depuis ce fichier.&#10;- Ajouter des tests unitaires supplémentaires et des assertions pour les méthodes d'affichage.&#10;&#10;---&#10;&#10;Si vous voulez, je peux :&#10;- Ajouter les images `docs/images/architecture.png` et `docs/images/sortie_console.png` de démonstration.&#10;- Harmoniser la configuration `HibernateUtil` pour qu'elle lise `application.properties`.&#10;- Remplacer les `printStackTrace()` par du logging.&#10;&#10;Dites-moi quelle option vous préférez et je l'implémente.  &#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>