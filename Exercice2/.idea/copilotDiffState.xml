<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/ma/projet/service/ProjetService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ma/projet/service/ProjetService.java" />
              <option name="originalContent" value="package ma.projet.service;&#10;&#10;public class ProjetService {&#10;}&#10;" />
              <option name="updatedContent" value="package ma.projet.service;&#10;&#10;import ma.projet.classes.EmployeTache;&#10;import ma.projet.classes.Projet;&#10;import ma.projet.classes.Tache;&#10;import ma.projet.util.HibernateUtil;&#10;import org.hibernate.Session;&#10;import org.hibernate.Transaction;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.List;&#10;&#10;public class ProjetService {&#10;&#10;    public void create(Projet p) {&#10;        Transaction tx = null;&#10;        try (Session session = HibernateUtil.getSessionFactory().openSession()) {&#10;            tx = session.beginTransaction();&#10;            session.persist(p);&#10;            tx.commit();&#10;        } catch (Exception ex) {&#10;            if (tx != null) tx.rollback();&#10;            ex.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public Projet findById(int id) {&#10;        try (Session session = HibernateUtil.getSessionFactory().openSession()) {&#10;            return session.find(Projet.class, id);&#10;        }&#10;    }&#10;&#10;    public List&lt;Projet&gt; findAll() {&#10;        try (Session session = HibernateUtil.getSessionFactory().openSession()) {&#10;            return session.createQuery(&quot;from Projet&quot;, Projet.class).list();&#10;        }&#10;    }&#10;&#10;    public void update(Projet p) {&#10;        Transaction tx = null;&#10;        try (Session session = HibernateUtil.getSessionFactory().openSession()) {&#10;            tx = session.beginTransaction();&#10;            session.merge(p);&#10;            tx.commit();&#10;        } catch (Exception ex) {&#10;            if (tx != null) tx.rollback();&#10;            ex.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void delete(Projet p) {&#10;        Transaction tx = null;&#10;        try (Session session = HibernateUtil.getSessionFactory().openSession()) {&#10;            tx = session.beginTransaction();&#10;            session.remove(p);&#10;            tx.commit();&#10;        } catch (Exception ex) {&#10;            if (tx != null) tx.rollback();&#10;            ex.printStackTrace();&#10;        }&#10;    }&#10;&#10;    // Afficher la liste des tâches planifiées pour un projet.&#10;    public void afficherTachesPlanifiees(Projet projet) {&#10;        if (projet == null) return;&#10;        Projet p = findById(projet.getId());&#10;        if (p == null || p.getTaches() == null) return;&#10;        SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;);&#10;        System.out.println(&quot;Liste des tâches planifiées pour le projet : &quot; + p.getNom());&#10;        for (Tache t : p.getTaches()) {&#10;            System.out.println(&quot; - &quot; + t.getNom() + &quot; | Début prévu: &quot; + (t.getDateDebut()==null?&quot;N/A&quot;:sdf.format(t.getDateDebut())) + &quot; | Fin prévue: &quot; + (t.getDateFin()==null?&quot;N/A&quot;:sdf.format(t.getDateFin())));&#10;        }&#10;    }&#10;&#10;    // Afficher la liste des tâches réalisées avec les dates réelles (formaté)&#10;    public void afficherTachesRealiseesAvecDatesReelles(Projet projet) {&#10;        if (projet == null) return;&#10;        SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;);&#10;        System.out.println(&quot;Projet : &quot; + projet.getId() + &quot;\t Nom : &quot; + projet.getNom() + &quot;\t Date début : &quot; + (projet.getDateDebut()==null?&quot;N/A&quot;:new SimpleDateFormat(&quot;dd MMMM yyyy&quot;).format(projet.getDateDebut())));&#10;        System.out.println(&quot;Liste des tâches:&quot;);&#10;        EmployeTacheService ets = new EmployeTacheService();&#10;        List&lt;EmployeTache&gt; all = ets.getAll();&#10;        for (EmployeTache et : all) {&#10;            if (et == null || et.getTache() == null) continue;&#10;            if (et.getTache().getProjet() != null &amp;&amp; et.getTache().getProjet().getId() == projet.getId()) {&#10;                String nom = et.getTache().getNom();&#10;                String debut = et.getDateDebutReelle()==null?&quot;N/A&quot;:sdf.format(et.getDateDebutReelle());&#10;                String fin = et.getDateFinReelle()==null?&quot;N/A&quot;:sdf.format(et.getDateFinReelle());&#10;                System.out.printf(&quot;%3d  %-15s %12s %15s\n&quot;, et.getTache().getId(), nom, debut, fin);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>